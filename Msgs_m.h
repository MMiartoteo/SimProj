//
// Generated file, do not edit! Created by opp_msgc 4.2 from Msgs.msg.
//

#ifndef _MSGS_M_H_
#define _MSGS_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>Msgs.msg</tt> by opp_msgc.
 * <pre>
 * message ManagerMsg {
 * 	int managerID;  	
 * 	double x;       	
 * 	int hops = 0;		
 *     
 *     
 * }
 * </pre>
 */
class ManagerMsg : public ::cMessage
{
  protected:
    int managerID_var;
    double x_var;
    int hops_var;

  private:
    void copy(const ManagerMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ManagerMsg&);

  public:
    ManagerMsg(const char *name=NULL, int kind=0);
    ManagerMsg(const ManagerMsg& other);
    virtual ~ManagerMsg();
    ManagerMsg& operator=(const ManagerMsg& other);
    virtual ManagerMsg *dup() const {return new ManagerMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getManagerID() const;
    virtual void setManagerID(int managerID);
    virtual double getX() const;
    virtual void setX(double x);
    virtual int getHops() const;
    virtual void setHops(int hops);
};

inline void doPacking(cCommBuffer *b, ManagerMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ManagerMsg& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>Msgs.msg</tt> by opp_msgc.
 * <pre>
 * message LookupMsg {
 * 	int senderID; 	
 *                     
 *                     
 * 	double x;       
 *     int hops = 0;   
 * }
 * </pre>
 */
class LookupMsg : public ::cMessage
{
  protected:
    int senderID_var;
    double x_var;
    int hops_var;

  private:
    void copy(const LookupMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const LookupMsg&);

  public:
    LookupMsg(const char *name=NULL, int kind=0);
    LookupMsg(const LookupMsg& other);
    virtual ~LookupMsg();
    LookupMsg& operator=(const LookupMsg& other);
    virtual LookupMsg *dup() const {return new LookupMsg(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSenderID() const;
    virtual void setSenderID(int senderID);
    virtual double getX() const;
    virtual void setX(double x);
    virtual int getHops() const;
    virtual void setHops(int hops);
};

inline void doPacking(cCommBuffer *b, LookupMsg& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, LookupMsg& obj) {obj.parsimUnpack(b);}


#endif // _MSGS_M_H_
